// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_fire_dection (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read,
        src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read,
        src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_dout,
        cols_empty_n,
        cols_read,
        r_low_dout,
        r_low_empty_n,
        r_low_read,
        r_up_dout,
        r_up_empty_n,
        r_up_read,
        g_low_dout,
        g_low_empty_n,
        g_low_read,
        g_up_dout,
        g_up_empty_n,
        g_up_read,
        b_low_dout,
        b_low_empty_n,
        b_low_read,
        b_up_dout,
        b_up_empty_n,
        b_up_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] src_data_stream_0_V_dout;
input   src_data_stream_0_V_empty_n;
output   src_data_stream_0_V_read;
input  [7:0] src_data_stream_1_V_dout;
input   src_data_stream_1_V_empty_n;
output   src_data_stream_1_V_read;
input  [7:0] src_data_stream_2_V_dout;
input   src_data_stream_2_V_empty_n;
output   src_data_stream_2_V_read;
output  [7:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [7:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [7:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_dout;
input   cols_empty_n;
output   cols_read;
input  [31:0] r_low_dout;
input   r_low_empty_n;
output   r_low_read;
input  [31:0] r_up_dout;
input   r_up_empty_n;
output   r_up_read;
input  [31:0] g_low_dout;
input   g_low_empty_n;
output   g_low_read;
input  [31:0] g_up_dout;
input   g_up_empty_n;
output   g_up_read;
input  [31:0] b_low_dout;
input   b_low_empty_n;
output   b_low_read;
input  [31:0] b_up_dout;
input   b_up_empty_n;
output   b_up_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_0_V_read;
reg src_data_stream_1_V_read;
reg src_data_stream_2_V_read;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;
reg rows_read;
reg cols_read;
reg r_low_read;
reg r_up_read;
reg g_low_read;
reg g_up_read;
reg b_low_read;
reg b_up_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_1_i_fu_380_p2;
reg    src_data_stream_1_V_blk_n;
reg    src_data_stream_2_V_blk_n;
reg    dst_data_stream_0_V_blk_n;
wire    ap_CS_fsm_state5;
reg    dst_data_stream_1_V_blk_n;
reg    dst_data_stream_2_V_blk_n;
reg    rows_blk_n;
reg    cols_blk_n;
reg    r_low_blk_n;
reg    r_up_blk_n;
reg    g_low_blk_n;
reg    g_up_blk_n;
reg    b_low_blk_n;
reg    b_up_blk_n;
reg   [31:0] rows_read_reg_642;
reg    ap_block_state1;
reg   [31:0] cols_read_reg_647;
reg   [31:0] r_low_read_reg_652;
reg   [31:0] r_up_read_reg_657;
reg   [31:0] g_low_read_reg_662;
reg   [31:0] g_up_read_reg_667;
reg   [31:0] b_low_read_reg_672;
reg   [31:0] b_up_read_reg_677;
wire   [30:0] row_fu_370_p2;
reg   [30:0] row_reg_685;
wire    ap_CS_fsm_state2;
wire   [30:0] col_fu_385_p2;
reg   [30:0] col_reg_693;
reg    ap_block_state3;
reg   [7:0] tmp_3_reg_698;
reg   [7:0] tmp_4_reg_703;
reg   [7:0] tmp_5_reg_710;
wire   [15:0] tmp_6_cast65_i_fu_399_p1;
reg   [15:0] tmp_6_cast65_i_reg_718;
wire   [15:0] tmp_7_i_fu_403_p2;
reg   [15:0] tmp_7_i_reg_724;
wire   [0:0] not_sel_tmp1_fu_473_p2;
reg   [0:0] not_sel_tmp1_reg_729;
wire   [0:0] tmp_33_i_fu_549_p2;
reg   [0:0] tmp_33_i_reg_734;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_34_i_fu_555_p2;
reg   [0:0] tmp_34_i_reg_739;
reg   [30:0] row_i_reg_339;
reg   [30:0] col_i_reg_350;
wire   [0:0] tmp_i_fu_365_p2;
reg    ap_block_state5;
wire   [31:0] row_cast_i_fu_361_p1;
wire   [31:0] col_cast_i_fu_376_p1;
wire   [7:0] tmp_7_i_fu_403_p0;
wire   [31:0] tmp_4_i_fu_391_p1;
wire   [31:0] tmp_6_i_fu_395_p1;
wire   [31:0] tmp_8_i_fu_409_p1;
wire   [0:0] tmp_26_i_fu_418_p2;
wire   [0:0] tmp_30_i_fu_428_p2;
wire   [0:0] tmp7_fu_443_p2;
wire   [0:0] tmp_25_i_fu_413_p2;
wire   [0:0] tmp_32_i_fu_438_p2;
wire   [0:0] tmp_31_i_fu_433_p2;
wire   [0:0] tmp9_fu_455_p2;
wire   [0:0] tmp_29_i_fu_423_p2;
wire   [0:0] tmp8_fu_461_p2;
wire   [0:0] tmp6_fu_449_p2;
wire   [0:0] sel_tmp1_fu_467_p2;
wire   [15:0] grp_fu_594_p3;
wire   [14:0] tmp_11_i_fu_497_p3;
wire  signed [15:0] grp_fu_618_p3;
wire   [7:0] tmp_17_i_fu_508_p4;
wire   [14:0] tmp_18_i_fu_523_p3;
wire  signed [15:0] grp_fu_626_p3;
wire   [7:0] tmp_24_i_fu_534_p4;
wire   [7:0] y_fu_488_p4;
wire   [7:0] cb_fu_517_p2;
wire   [7:0] cr_fu_543_p2;
wire   [0:0] or_cond7_i_fu_561_p2;
wire   [0:0] brmerge_i_fu_565_p2;
wire   [7:0] grp_fu_594_p0;
wire   [7:0] grp_fu_594_p1;
wire   [15:0] grp_fu_602_p3;
wire   [7:0] grp_fu_602_p0;
wire   [13:0] tmp_8_cast64_i_fu_485_p1;
wire   [5:0] grp_fu_602_p1;
wire   [7:0] grp_fu_610_p0;
wire  signed [6:0] grp_fu_610_p1;
wire   [14:0] grp_fu_610_p2;
wire   [7:0] grp_fu_618_p0;
wire  signed [7:0] grp_fu_618_p1;
wire  signed [15:0] grp_fu_610_p3;
wire   [7:0] grp_fu_626_p0;
wire  signed [7:0] grp_fu_626_p1;
wire  signed [15:0] grp_fu_633_p3;
wire   [7:0] grp_fu_633_p0;
wire  signed [5:0] grp_fu_633_p1;
wire   [14:0] grp_fu_633_p2;
reg   [4:0] ap_NS_fsm;
wire   [15:0] grp_fu_594_p00;
wire   [14:0] grp_fu_610_p00;
wire   [15:0] grp_fu_610_p20;
wire   [15:0] grp_fu_633_p20;
wire   [15:0] tmp_7_i_fu_403_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

fire_mac_muladd_8bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
fire_mac_muladd_8bkb_U31(
    .din0(grp_fu_594_p0),
    .din1(grp_fu_594_p1),
    .din2(grp_fu_602_p3),
    .dout(grp_fu_594_p3)
);

fire_mac_muladd_8cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
fire_mac_muladd_8cud_U32(
    .din0(grp_fu_602_p0),
    .din1(grp_fu_602_p1),
    .din2(tmp_7_i_reg_724),
    .dout(grp_fu_602_p3)
);

fire_mac_muladd_8dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
fire_mac_muladd_8dEe_U33(
    .din0(grp_fu_610_p0),
    .din1(grp_fu_610_p1),
    .din2(grp_fu_610_p2),
    .dout(grp_fu_610_p3)
);

fire_mac_muladd_8eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
fire_mac_muladd_8eOg_U34(
    .din0(grp_fu_618_p0),
    .din1(grp_fu_618_p1),
    .din2(grp_fu_610_p3),
    .dout(grp_fu_618_p3)
);

fire_mac_muladd_8eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
fire_mac_muladd_8eOg_U35(
    .din0(grp_fu_626_p0),
    .din1(grp_fu_626_p1),
    .din2(grp_fu_633_p3),
    .dout(grp_fu_626_p3)
);

fire_mac_muladd_8fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 16 ))
fire_mac_muladd_8fYi_U36(
    .din0(grp_fu_633_p0),
    .din1(grp_fu_633_p1),
    .din2(grp_fu_633_p2),
    .dout(grp_fu_633_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_365_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        col_i_reg_350 <= col_reg_693;
    end else if (((tmp_i_fu_365_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        col_i_reg_350 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        row_i_reg_339 <= row_reg_685;
    end else if ((~((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_i_reg_339 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_low_read_reg_672 <= b_low_dout;
        b_up_read_reg_677 <= b_up_dout;
        cols_read_reg_647 <= cols_dout;
        g_low_read_reg_662 <= g_low_dout;
        g_up_read_reg_667 <= g_up_dout;
        r_low_read_reg_652 <= r_low_dout;
        r_up_read_reg_657 <= r_up_dout;
        rows_read_reg_642 <= rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        col_reg_693 <= col_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        not_sel_tmp1_reg_729 <= not_sel_tmp1_fu_473_p2;
        tmp_3_reg_698 <= src_data_stream_0_V_dout;
        tmp_4_reg_703 <= src_data_stream_1_V_dout;
        tmp_5_reg_710 <= src_data_stream_2_V_dout;
        tmp_6_cast65_i_reg_718[7 : 0] <= tmp_6_cast65_i_fu_399_p1[7 : 0];
        tmp_7_i_reg_724[15 : 1] <= tmp_7_i_fu_403_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_reg_685 <= row_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_33_i_reg_734 <= tmp_33_i_fu_549_p2;
        tmp_34_i_reg_739 <= tmp_34_i_fu_555_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_365_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_365_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_low_blk_n = b_low_empty_n;
    end else begin
        b_low_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_low_read = 1'b1;
    end else begin
        b_low_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_up_blk_n = b_up_empty_n;
    end else begin
        b_up_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_up_read = 1'b1;
    end else begin
        b_up_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_blk_n = cols_empty_n;
    end else begin
        cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_read = 1'b1;
    end else begin
        cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n;
    end else begin
        dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        dst_data_stream_0_V_write = 1'b1;
    end else begin
        dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n;
    end else begin
        dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        dst_data_stream_1_V_write = 1'b1;
    end else begin
        dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n;
    end else begin
        dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        dst_data_stream_2_V_write = 1'b1;
    end else begin
        dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        g_low_blk_n = g_low_empty_n;
    end else begin
        g_low_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        g_low_read = 1'b1;
    end else begin
        g_low_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        g_up_blk_n = g_up_empty_n;
    end else begin
        g_up_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        g_up_read = 1'b1;
    end else begin
        g_up_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_low_blk_n = r_low_empty_n;
    end else begin
        r_low_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_low_read = 1'b1;
    end else begin
        r_low_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_up_blk_n = r_up_empty_n;
    end else begin
        r_up_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_up_read = 1'b1;
    end else begin
        r_up_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_i_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_0_V_blk_n = src_data_stream_0_V_empty_n;
    end else begin
        src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_0_V_read = 1'b1;
    end else begin
        src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_i_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_1_V_blk_n = src_data_stream_1_V_empty_n;
    end else begin
        src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_1_V_read = 1'b1;
    end else begin
        src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_i_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_2_V_blk_n = src_data_stream_2_V_empty_n;
    end else begin
        src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_2_V_read = 1'b1;
    end else begin
        src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_365_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = (((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_380_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5 = ((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0));
end

assign brmerge_i_fu_565_p2 = (or_cond7_i_fu_561_p2 | not_sel_tmp1_reg_729);

assign cb_fu_517_p2 = (tmp_17_i_fu_508_p4 ^ 8'd128);

assign col_cast_i_fu_376_p1 = col_i_reg_350;

assign col_fu_385_p2 = (col_i_reg_350 + 31'd1);

assign cr_fu_543_p2 = (tmp_24_i_fu_534_p4 ^ 8'd128);

assign dst_data_stream_0_V_din = ((brmerge_i_fu_565_p2[0:0] === 1'b1) ? 8'd255 : tmp_3_reg_698);

assign dst_data_stream_1_V_din = ((brmerge_i_fu_565_p2[0:0] === 1'b1) ? 8'd0 : tmp_4_reg_703);

assign dst_data_stream_2_V_din = ((brmerge_i_fu_565_p2[0:0] === 1'b1) ? 8'd0 : tmp_5_reg_710);

assign grp_fu_594_p0 = grp_fu_594_p00;

assign grp_fu_594_p00 = tmp_5_reg_710;

assign grp_fu_594_p1 = 16'd76;

assign grp_fu_602_p0 = tmp_8_cast64_i_fu_485_p1;

assign grp_fu_602_p1 = 14'd29;

assign grp_fu_610_p0 = grp_fu_610_p00;

assign grp_fu_610_p00 = tmp_5_reg_710;

assign grp_fu_610_p1 = 15'd32725;

assign grp_fu_610_p2 = grp_fu_610_p20;

assign grp_fu_610_p20 = tmp_11_i_fu_497_p3;

assign grp_fu_618_p0 = tmp_6_cast65_i_reg_718;

assign grp_fu_618_p1 = 16'd65451;

assign grp_fu_626_p0 = tmp_6_cast65_i_reg_718;

assign grp_fu_626_p1 = 16'd65429;

assign grp_fu_633_p0 = tmp_8_cast64_i_fu_485_p1;

assign grp_fu_633_p1 = 14'd16363;

assign grp_fu_633_p2 = grp_fu_633_p20;

assign grp_fu_633_p20 = tmp_18_i_fu_523_p3;

assign not_sel_tmp1_fu_473_p2 = (sel_tmp1_fu_467_p2 ^ 1'd1);

assign or_cond7_i_fu_561_p2 = (tmp_34_i_reg_739 & tmp_33_i_reg_734);

assign row_cast_i_fu_361_p1 = row_i_reg_339;

assign row_fu_370_p2 = (row_i_reg_339 + 31'd1);

assign sel_tmp1_fu_467_p2 = (tmp8_fu_461_p2 | tmp6_fu_449_p2);

assign tmp6_fu_449_p2 = (tmp_25_i_fu_413_p2 | tmp7_fu_443_p2);

assign tmp7_fu_443_p2 = (tmp_30_i_fu_428_p2 | tmp_26_i_fu_418_p2);

assign tmp8_fu_461_p2 = (tmp_29_i_fu_423_p2 | tmp9_fu_455_p2);

assign tmp9_fu_455_p2 = (tmp_32_i_fu_438_p2 | tmp_31_i_fu_433_p2);

assign tmp_11_i_fu_497_p3 = {{tmp_4_reg_703}, {7'd0}};

assign tmp_17_i_fu_508_p4 = {{grp_fu_618_p3[15:8]}};

assign tmp_18_i_fu_523_p3 = {{tmp_5_reg_710}, {7'd0}};

assign tmp_1_i_fu_380_p2 = (($signed(col_cast_i_fu_376_p1) < $signed(cols_read_reg_647)) ? 1'b1 : 1'b0);

assign tmp_24_i_fu_534_p4 = {{grp_fu_626_p3[15:8]}};

assign tmp_25_i_fu_413_p2 = (($signed(tmp_4_i_fu_391_p1) < $signed(r_low_read_reg_652)) ? 1'b1 : 1'b0);

assign tmp_26_i_fu_418_p2 = (($signed(tmp_4_i_fu_391_p1) > $signed(r_up_read_reg_657)) ? 1'b1 : 1'b0);

assign tmp_29_i_fu_423_p2 = (($signed(tmp_6_i_fu_395_p1) < $signed(g_low_read_reg_662)) ? 1'b1 : 1'b0);

assign tmp_30_i_fu_428_p2 = (($signed(tmp_6_i_fu_395_p1) > $signed(g_up_read_reg_667)) ? 1'b1 : 1'b0);

assign tmp_31_i_fu_433_p2 = (($signed(tmp_8_i_fu_409_p1) < $signed(b_low_read_reg_672)) ? 1'b1 : 1'b0);

assign tmp_32_i_fu_438_p2 = (($signed(tmp_8_i_fu_409_p1) > $signed(b_up_read_reg_677)) ? 1'b1 : 1'b0);

assign tmp_33_i_fu_549_p2 = ((y_fu_488_p4 > cb_fu_517_p2) ? 1'b1 : 1'b0);

assign tmp_34_i_fu_555_p2 = ((cr_fu_543_p2 > cb_fu_517_p2) ? 1'b1 : 1'b0);

assign tmp_4_i_fu_391_p1 = src_data_stream_2_V_dout;

assign tmp_6_cast65_i_fu_399_p1 = src_data_stream_0_V_dout;

assign tmp_6_i_fu_395_p1 = src_data_stream_0_V_dout;

assign tmp_7_i_fu_403_p0 = tmp_7_i_fu_403_p00;

assign tmp_7_i_fu_403_p00 = src_data_stream_0_V_dout;

assign tmp_7_i_fu_403_p2 = (tmp_7_i_fu_403_p0 * $signed('h96));

assign tmp_8_cast64_i_fu_485_p1 = tmp_4_reg_703;

assign tmp_8_i_fu_409_p1 = src_data_stream_1_V_dout;

assign tmp_i_fu_365_p2 = (($signed(row_cast_i_fu_361_p1) < $signed(rows_read_reg_642)) ? 1'b1 : 1'b0);

assign y_fu_488_p4 = {{grp_fu_594_p3[15:8]}};

always @ (posedge ap_clk) begin
    tmp_6_cast65_i_reg_718[15:8] <= 8'b00000000;
    tmp_7_i_reg_724[0] <= 1'b0;
end

endmodule //hls_fire_dection
