-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_fire_dection is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_empty_n : IN STD_LOGIC;
    cols_read : OUT STD_LOGIC;
    r_low_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    r_low_empty_n : IN STD_LOGIC;
    r_low_read : OUT STD_LOGIC;
    r_up_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    r_up_empty_n : IN STD_LOGIC;
    r_up_read : OUT STD_LOGIC;
    g_low_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    g_low_empty_n : IN STD_LOGIC;
    g_low_read : OUT STD_LOGIC;
    g_up_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    g_up_empty_n : IN STD_LOGIC;
    g_up_read : OUT STD_LOGIC;
    b_low_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    b_low_empty_n : IN STD_LOGIC;
    b_low_read : OUT STD_LOGIC;
    b_up_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    b_up_empty_n : IN STD_LOGIC;
    b_up_read : OUT STD_LOGIC );
end;


architecture behav of hls_fire_dection is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv16_96 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_4C : STD_LOGIC_VECTOR (15 downto 0) := "0000000001001100";
    constant ap_const_lv14_1D : STD_LOGIC_VECTOR (13 downto 0) := "00000000011101";
    constant ap_const_lv15_7FD5 : STD_LOGIC_VECTOR (14 downto 0) := "111111111010101";
    constant ap_const_lv16_FFAB : STD_LOGIC_VECTOR (15 downto 0) := "1111111110101011";
    constant ap_const_lv16_FF95 : STD_LOGIC_VECTOR (15 downto 0) := "1111111110010101";
    constant ap_const_lv14_3FEB : STD_LOGIC_VECTOR (13 downto 0) := "11111111101011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_i_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_stream_1_V_blk_n : STD_LOGIC;
    signal src_data_stream_2_V_blk_n : STD_LOGIC;
    signal dst_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal dst_data_stream_1_V_blk_n : STD_LOGIC;
    signal dst_data_stream_2_V_blk_n : STD_LOGIC;
    signal rows_blk_n : STD_LOGIC;
    signal cols_blk_n : STD_LOGIC;
    signal r_low_blk_n : STD_LOGIC;
    signal r_up_blk_n : STD_LOGIC;
    signal g_low_blk_n : STD_LOGIC;
    signal g_up_blk_n : STD_LOGIC;
    signal b_low_blk_n : STD_LOGIC;
    signal b_up_blk_n : STD_LOGIC;
    signal rows_read_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_read_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_low_read_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_up_read_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_low_read_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_up_read_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_low_read_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_up_read_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_fu_370_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_reg_685 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal col_fu_385_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_reg_693 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_3_reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_703 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_710 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_cast65_i_fu_399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_cast65_i_reg_718 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_i_fu_403_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_i_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal not_sel_tmp1_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp1_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_i_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_i_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_34_i_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_i_reg_739 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_i_reg_339 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_i_reg_350 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal row_cast_i_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_cast_i_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_fu_403_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_i_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_i_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_i_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_i_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_i_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_594_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_i_fu_497_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_618_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_i_fu_508_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_i_fu_523_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_626_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_i_fu_534_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_488_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal cb_fu_517_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cr_fu_543_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond7_i_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_594_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_594_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_602_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_602_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_cast64_i_fu_485_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_602_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_610_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_610_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_610_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_618_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_618_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_610_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_626_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_626_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_633_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_633_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_633_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_633_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_594_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_610_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_610_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_633_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_i_fu_403_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component fire_mac_muladd_8bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fire_mac_muladd_8cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fire_mac_muladd_8dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fire_mac_muladd_8eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fire_mac_muladd_8fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    fire_mac_muladd_8bkb_U31 : component fire_mac_muladd_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_594_p0,
        din1 => grp_fu_594_p1,
        din2 => grp_fu_602_p3,
        dout => grp_fu_594_p3);

    fire_mac_muladd_8cud_U32 : component fire_mac_muladd_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_602_p0,
        din1 => grp_fu_602_p1,
        din2 => tmp_7_i_reg_724,
        dout => grp_fu_602_p3);

    fire_mac_muladd_8dEe_U33 : component fire_mac_muladd_8dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        din2_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_610_p0,
        din1 => grp_fu_610_p1,
        din2 => grp_fu_610_p2,
        dout => grp_fu_610_p3);

    fire_mac_muladd_8eOg_U34 : component fire_mac_muladd_8eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_618_p0,
        din1 => grp_fu_618_p1,
        din2 => grp_fu_610_p3,
        dout => grp_fu_618_p3);

    fire_mac_muladd_8eOg_U35 : component fire_mac_muladd_8eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_626_p0,
        din1 => grp_fu_626_p1,
        din2 => grp_fu_633_p3,
        dout => grp_fu_626_p3);

    fire_mac_muladd_8fYi_U36 : component fire_mac_muladd_8fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_633_p0,
        din1 => grp_fu_633_p1,
        din2 => grp_fu_633_p2,
        dout => grp_fu_633_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_365_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    col_i_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                col_i_reg_350 <= col_reg_693;
            elsif (((tmp_i_fu_365_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_i_reg_350 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    row_i_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                row_i_reg_339 <= row_reg_685;
            elsif ((not(((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_i_reg_339 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                b_low_read_reg_672 <= b_low_dout;
                b_up_read_reg_677 <= b_up_dout;
                cols_read_reg_647 <= cols_dout;
                g_low_read_reg_662 <= g_low_dout;
                g_up_read_reg_667 <= g_up_dout;
                r_low_read_reg_652 <= r_low_dout;
                r_up_read_reg_657 <= r_up_dout;
                rows_read_reg_642 <= rows_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                col_reg_693 <= col_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                not_sel_tmp1_reg_729 <= not_sel_tmp1_fu_473_p2;
                tmp_3_reg_698 <= src_data_stream_0_V_dout;
                tmp_4_reg_703 <= src_data_stream_1_V_dout;
                tmp_5_reg_710 <= src_data_stream_2_V_dout;
                    tmp_6_cast65_i_reg_718(7 downto 0) <= tmp_6_cast65_i_fu_399_p1(7 downto 0);
                    tmp_7_i_reg_724(15 downto 1) <= tmp_7_i_fu_403_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_reg_685 <= row_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_33_i_reg_734 <= tmp_33_i_fu_549_p2;
                tmp_34_i_reg_739 <= tmp_34_i_fu_555_p2;
            end if;
        end if;
    end process;
    tmp_6_cast65_i_reg_718(15 downto 8) <= "00000000";
    tmp_7_i_reg_724(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, rows_empty_n, cols_empty_n, r_low_empty_n, r_up_empty_n, g_low_empty_n, g_up_empty_n, b_low_empty_n, b_up_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_380_p2, ap_CS_fsm_state5, ap_CS_fsm_state2, tmp_i_fu_365_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_365_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if ((not(((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_empty_n, r_low_empty_n, r_up_empty_n, g_low_empty_n, g_up_empty_n, b_low_empty_n, b_up_empty_n)
    begin
                ap_block_state1 <= ((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, tmp_1_i_fu_380_p2)
    begin
                ap_block_state3 <= (((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n)
    begin
                ap_block_state5 <= ((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_i_fu_365_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_365_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_i_fu_365_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_365_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_low_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, b_low_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_low_blk_n <= b_low_empty_n;
        else 
            b_low_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    b_low_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, r_low_empty_n, r_up_empty_n, g_low_empty_n, g_up_empty_n, b_low_empty_n, b_up_empty_n)
    begin
        if ((not(((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_low_read <= ap_const_logic_1;
        else 
            b_low_read <= ap_const_logic_0;
        end if; 
    end process;


    b_up_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, b_up_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_up_blk_n <= b_up_empty_n;
        else 
            b_up_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    b_up_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, r_low_empty_n, r_up_empty_n, g_low_empty_n, g_up_empty_n, b_low_empty_n, b_up_empty_n)
    begin
        if ((not(((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_up_read <= ap_const_logic_1;
        else 
            b_up_read <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_i_fu_565_p2 <= (or_cond7_i_fu_561_p2 or not_sel_tmp1_reg_729);
    cb_fu_517_p2 <= (tmp_17_i_fu_508_p4 xor ap_const_lv8_80);
    col_cast_i_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_reg_350),32));
    col_fu_385_p2 <= std_logic_vector(unsigned(col_i_reg_350) + unsigned(ap_const_lv31_1));

    cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_blk_n <= cols_empty_n;
        else 
            cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, r_low_empty_n, r_up_empty_n, g_low_empty_n, g_up_empty_n, b_low_empty_n, b_up_empty_n)
    begin
        if ((not(((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_read <= ap_const_logic_1;
        else 
            cols_read <= ap_const_logic_0;
        end if; 
    end process;

    cr_fu_543_p2 <= (tmp_24_i_fu_534_p4 xor ap_const_lv8_80);

    dst_data_stream_0_V_blk_n_assign_proc : process(dst_data_stream_0_V_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_data_stream_0_V_blk_n <= dst_data_stream_0_V_full_n;
        else 
            dst_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_0_V_din <= 
        ap_const_lv8_FF when (brmerge_i_fu_565_p2(0) = '1') else 
        tmp_3_reg_698;

    dst_data_stream_0_V_write_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_CS_fsm_state5)
    begin
        if ((not(((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_1_V_blk_n_assign_proc : process(dst_data_stream_1_V_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_data_stream_1_V_blk_n <= dst_data_stream_1_V_full_n;
        else 
            dst_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_1_V_din <= 
        ap_const_lv8_0 when (brmerge_i_fu_565_p2(0) = '1') else 
        tmp_4_reg_703;

    dst_data_stream_1_V_write_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_CS_fsm_state5)
    begin
        if ((not(((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_2_V_blk_n_assign_proc : process(dst_data_stream_2_V_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_data_stream_2_V_blk_n <= dst_data_stream_2_V_full_n;
        else 
            dst_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_2_V_din <= 
        ap_const_lv8_0 when (brmerge_i_fu_565_p2(0) = '1') else 
        tmp_5_reg_710;

    dst_data_stream_2_V_write_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_CS_fsm_state5)
    begin
        if ((not(((dst_data_stream_2_V_full_n = ap_const_logic_0) or (dst_data_stream_1_V_full_n = ap_const_logic_0) or (dst_data_stream_0_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    g_low_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, g_low_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            g_low_blk_n <= g_low_empty_n;
        else 
            g_low_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    g_low_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, r_low_empty_n, r_up_empty_n, g_low_empty_n, g_up_empty_n, b_low_empty_n, b_up_empty_n)
    begin
        if ((not(((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            g_low_read <= ap_const_logic_1;
        else 
            g_low_read <= ap_const_logic_0;
        end if; 
    end process;


    g_up_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, g_up_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            g_up_blk_n <= g_up_empty_n;
        else 
            g_up_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    g_up_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, r_low_empty_n, r_up_empty_n, g_low_empty_n, g_up_empty_n, b_low_empty_n, b_up_empty_n)
    begin
        if ((not(((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            g_up_read <= ap_const_logic_1;
        else 
            g_up_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_594_p0 <= grp_fu_594_p00(8 - 1 downto 0);
    grp_fu_594_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_710),16));
    grp_fu_594_p1 <= ap_const_lv16_4C(8 - 1 downto 0);
    grp_fu_602_p0 <= tmp_8_cast64_i_fu_485_p1(8 - 1 downto 0);
    grp_fu_602_p1 <= ap_const_lv14_1D(6 - 1 downto 0);
    grp_fu_610_p0 <= grp_fu_610_p00(8 - 1 downto 0);
    grp_fu_610_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_710),15));
    grp_fu_610_p1 <= ap_const_lv15_7FD5(7 - 1 downto 0);
    grp_fu_610_p2 <= grp_fu_610_p20(15 - 1 downto 0);
    grp_fu_610_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_i_fu_497_p3),16));
    grp_fu_618_p0 <= tmp_6_cast65_i_reg_718(8 - 1 downto 0);
    grp_fu_618_p1 <= ap_const_lv16_FFAB(8 - 1 downto 0);
    grp_fu_626_p0 <= tmp_6_cast65_i_reg_718(8 - 1 downto 0);
    grp_fu_626_p1 <= ap_const_lv16_FF95(8 - 1 downto 0);
    grp_fu_633_p0 <= tmp_8_cast64_i_fu_485_p1(8 - 1 downto 0);
    grp_fu_633_p1 <= ap_const_lv14_3FEB(6 - 1 downto 0);
    grp_fu_633_p2 <= grp_fu_633_p20(15 - 1 downto 0);
    grp_fu_633_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_i_fu_523_p3),16));
    not_sel_tmp1_fu_473_p2 <= (sel_tmp1_fu_467_p2 xor ap_const_lv1_1);
    or_cond7_i_fu_561_p2 <= (tmp_34_i_reg_739 and tmp_33_i_reg_734);

    r_low_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, r_low_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_low_blk_n <= r_low_empty_n;
        else 
            r_low_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    r_low_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, r_low_empty_n, r_up_empty_n, g_low_empty_n, g_up_empty_n, b_low_empty_n, b_up_empty_n)
    begin
        if ((not(((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_low_read <= ap_const_logic_1;
        else 
            r_low_read <= ap_const_logic_0;
        end if; 
    end process;


    r_up_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, r_up_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_up_blk_n <= r_up_empty_n;
        else 
            r_up_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    r_up_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, r_low_empty_n, r_up_empty_n, g_low_empty_n, g_up_empty_n, b_low_empty_n, b_up_empty_n)
    begin
        if ((not(((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_up_read <= ap_const_logic_1;
        else 
            r_up_read <= ap_const_logic_0;
        end if; 
    end process;

    row_cast_i_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_i_reg_339),32));
    row_fu_370_p2 <= std_logic_vector(unsigned(row_i_reg_339) + unsigned(ap_const_lv31_1));

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_empty_n, r_low_empty_n, r_up_empty_n, g_low_empty_n, g_up_empty_n, b_low_empty_n, b_up_empty_n)
    begin
        if ((not(((b_up_empty_n = ap_const_logic_0) or (b_low_empty_n = ap_const_logic_0) or (g_up_empty_n = ap_const_logic_0) or (g_low_empty_n = ap_const_logic_0) or (r_up_empty_n = ap_const_logic_0) or (r_low_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_467_p2 <= (tmp8_fu_461_p2 or tmp6_fu_449_p2);

    src_data_stream_0_V_blk_n_assign_proc : process(src_data_stream_0_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_380_p2)
    begin
        if (((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_0_V_blk_n <= src_data_stream_0_V_empty_n;
        else 
            src_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_0_V_read_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_380_p2)
    begin
        if ((not((((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_1_V_blk_n_assign_proc : process(src_data_stream_1_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_380_p2)
    begin
        if (((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_1_V_blk_n <= src_data_stream_1_V_empty_n;
        else 
            src_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_1_V_read_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_380_p2)
    begin
        if ((not((((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_2_V_blk_n_assign_proc : process(src_data_stream_2_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_380_p2)
    begin
        if (((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_2_V_blk_n <= src_data_stream_2_V_empty_n;
        else 
            src_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_2_V_read_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, ap_CS_fsm_state3, tmp_1_i_fu_380_p2)
    begin
        if ((not((((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (src_data_stream_0_V_empty_n = ap_const_logic_0)))) and (tmp_1_i_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp6_fu_449_p2 <= (tmp_25_i_fu_413_p2 or tmp7_fu_443_p2);
    tmp7_fu_443_p2 <= (tmp_30_i_fu_428_p2 or tmp_26_i_fu_418_p2);
    tmp8_fu_461_p2 <= (tmp_29_i_fu_423_p2 or tmp9_fu_455_p2);
    tmp9_fu_455_p2 <= (tmp_32_i_fu_438_p2 or tmp_31_i_fu_433_p2);
    tmp_11_i_fu_497_p3 <= (tmp_4_reg_703 & ap_const_lv7_0);
    tmp_17_i_fu_508_p4 <= grp_fu_618_p3(15 downto 8);
    tmp_18_i_fu_523_p3 <= (tmp_5_reg_710 & ap_const_lv7_0);
    tmp_1_i_fu_380_p2 <= "1" when (signed(col_cast_i_fu_376_p1) < signed(cols_read_reg_647)) else "0";
    tmp_24_i_fu_534_p4 <= grp_fu_626_p3(15 downto 8);
    tmp_25_i_fu_413_p2 <= "1" when (signed(tmp_4_i_fu_391_p1) < signed(r_low_read_reg_652)) else "0";
    tmp_26_i_fu_418_p2 <= "1" when (signed(tmp_4_i_fu_391_p1) > signed(r_up_read_reg_657)) else "0";
    tmp_29_i_fu_423_p2 <= "1" when (signed(tmp_6_i_fu_395_p1) < signed(g_low_read_reg_662)) else "0";
    tmp_30_i_fu_428_p2 <= "1" when (signed(tmp_6_i_fu_395_p1) > signed(g_up_read_reg_667)) else "0";
    tmp_31_i_fu_433_p2 <= "1" when (signed(tmp_8_i_fu_409_p1) < signed(b_low_read_reg_672)) else "0";
    tmp_32_i_fu_438_p2 <= "1" when (signed(tmp_8_i_fu_409_p1) > signed(b_up_read_reg_677)) else "0";
    tmp_33_i_fu_549_p2 <= "1" when (unsigned(y_fu_488_p4) > unsigned(cb_fu_517_p2)) else "0";
    tmp_34_i_fu_555_p2 <= "1" when (unsigned(cr_fu_543_p2) > unsigned(cb_fu_517_p2)) else "0";
    tmp_4_i_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_data_stream_2_V_dout),32));
    tmp_6_cast65_i_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_data_stream_0_V_dout),16));
    tmp_6_i_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_data_stream_0_V_dout),32));
    tmp_7_i_fu_403_p0 <= tmp_7_i_fu_403_p00(8 - 1 downto 0);
    tmp_7_i_fu_403_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_data_stream_0_V_dout),16));
    tmp_7_i_fu_403_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_i_fu_403_p0) * unsigned(ap_const_lv16_96), 16));
    tmp_8_cast64_i_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_703),14));
    tmp_8_i_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_data_stream_1_V_dout),32));
    tmp_i_fu_365_p2 <= "1" when (signed(row_cast_i_fu_361_p1) < signed(rows_read_reg_642)) else "0";
    y_fu_488_p4 <= grp_fu_594_p3(15 downto 8);
end behav;
