// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_fire_dection (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read,
        src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read,
        src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_dout,
        cols_empty_n,
        cols_read,
        r_low_dout,
        r_low_empty_n,
        r_low_read,
        r_up_dout,
        r_up_empty_n,
        r_up_read,
        g_low_dout,
        g_low_empty_n,
        g_low_read,
        g_up_dout,
        g_up_empty_n,
        g_up_read,
        b_low_dout,
        b_low_empty_n,
        b_low_read,
        b_up_dout,
        b_up_empty_n,
        b_up_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] src_data_stream_0_V_dout;
input   src_data_stream_0_V_empty_n;
output   src_data_stream_0_V_read;
input  [7:0] src_data_stream_1_V_dout;
input   src_data_stream_1_V_empty_n;
output   src_data_stream_1_V_read;
input  [7:0] src_data_stream_2_V_dout;
input   src_data_stream_2_V_empty_n;
output   src_data_stream_2_V_read;
output  [7:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [7:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [7:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_dout;
input   cols_empty_n;
output   cols_read;
input  [31:0] r_low_dout;
input   r_low_empty_n;
output   r_low_read;
input  [31:0] r_up_dout;
input   r_up_empty_n;
output   r_up_read;
input  [31:0] g_low_dout;
input   g_low_empty_n;
output   g_low_read;
input  [31:0] g_up_dout;
input   g_up_empty_n;
output   g_up_read;
input  [31:0] b_low_dout;
input   b_low_empty_n;
output   b_low_read;
input  [31:0] b_up_dout;
input   b_up_empty_n;
output   b_up_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_0_V_read;
reg src_data_stream_1_V_read;
reg src_data_stream_2_V_read;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;
reg rows_read;
reg cols_read;
reg r_low_read;
reg r_up_read;
reg g_low_read;
reg g_up_read;
reg b_low_read;
reg b_up_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_1_i_fu_354_p2;
reg    src_data_stream_1_V_blk_n;
reg    src_data_stream_2_V_blk_n;
reg    dst_data_stream_0_V_blk_n;
wire    ap_CS_fsm_state4;
reg    dst_data_stream_1_V_blk_n;
reg    dst_data_stream_2_V_blk_n;
reg    rows_blk_n;
reg    cols_blk_n;
reg    r_low_blk_n;
reg    r_up_blk_n;
reg    g_low_blk_n;
reg    g_up_blk_n;
reg    b_low_blk_n;
reg    b_up_blk_n;
reg   [31:0] rows_read_reg_503;
reg    ap_block_state1;
reg   [31:0] cols_read_reg_508;
reg   [31:0] r_low_read_reg_513;
reg   [31:0] r_up_read_reg_518;
reg   [31:0] g_low_read_reg_523;
reg   [31:0] g_up_read_reg_528;
reg   [31:0] b_low_read_reg_533;
reg   [31:0] b_up_read_reg_538;
wire   [30:0] row_fu_344_p2;
reg   [30:0] row_reg_546;
wire    ap_CS_fsm_state2;
wire   [30:0] col_fu_359_p2;
reg   [30:0] col_reg_554;
reg    ap_block_state3;
wire   [7:0] B_fu_479_p3;
reg   [7:0] B_reg_559;
wire   [7:0] G_fu_487_p3;
reg   [7:0] G_reg_564;
wire   [7:0] R_fu_495_p3;
reg   [7:0] R_reg_569;
reg   [30:0] row_i_reg_313;
reg   [30:0] col_i_reg_324;
wire   [0:0] tmp_i_fu_339_p2;
reg    ap_block_state4;
wire   [31:0] row_cast_i_fu_335_p1;
wire   [31:0] col_cast_i_fu_350_p1;
wire   [31:0] tmp_4_i_fu_365_p1;
wire   [31:0] tmp_i_7_fu_379_p1;
wire   [31:0] tmp_10_i_fu_393_p1;
wire   [0:0] tmp_14_i_fu_413_p2;
wire   [0:0] tmp_15_i_fu_419_p2;
wire   [0:0] tmp7_fu_425_p2;
wire   [0:0] tmp_13_i_fu_407_p2;
wire   [0:0] or_cond9_i_fu_431_p2;
wire   [0:0] tmp_11_i_fu_397_p2;
wire   [0:0] tmp_8_i_fu_383_p2;
wire   [0:0] tmp9_fu_443_p2;
wire   [0:0] tmp_12_i_fu_402_p2;
wire   [0:0] tmp_5_i_fu_369_p2;
wire   [0:0] tmp_9_i_fu_388_p2;
wire   [0:0] tmp_6_i_fu_374_p2;
wire   [0:0] rgb_flag_2_0_not_i_fu_437_p2;
wire   [0:0] tmp2_fu_461_p2;
wire   [0:0] tmp1_fu_455_p2;
wire   [0:0] tmp3_fu_467_p2;
wire   [0:0] tmp8_fu_449_p2;
wire   [0:0] brmerge_i_fu_473_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_339_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        col_i_reg_324 <= col_reg_554;
    end else if (((tmp_i_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        col_i_reg_324 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        row_i_reg_313 <= row_reg_546;
    end else if ((~((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_i_reg_313 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        B_reg_559 <= B_fu_479_p3;
        G_reg_564 <= G_fu_487_p3;
        R_reg_569 <= R_fu_495_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_low_read_reg_533 <= b_low_dout;
        b_up_read_reg_538 <= b_up_dout;
        cols_read_reg_508 <= cols_dout;
        g_low_read_reg_523 <= g_low_dout;
        g_up_read_reg_528 <= g_up_dout;
        r_low_read_reg_513 <= r_low_dout;
        r_up_read_reg_518 <= r_up_dout;
        rows_read_reg_503 <= rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        col_reg_554 <= col_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_reg_546 <= row_fu_344_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_339_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_339_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_low_blk_n = b_low_empty_n;
    end else begin
        b_low_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_low_read = 1'b1;
    end else begin
        b_low_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_up_blk_n = b_up_empty_n;
    end else begin
        b_up_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_up_read = 1'b1;
    end else begin
        b_up_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_blk_n = cols_empty_n;
    end else begin
        cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_read = 1'b1;
    end else begin
        cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n;
    end else begin
        dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_data_stream_0_V_write = 1'b1;
    end else begin
        dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n;
    end else begin
        dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_data_stream_1_V_write = 1'b1;
    end else begin
        dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n;
    end else begin
        dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_data_stream_2_V_write = 1'b1;
    end else begin
        dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        g_low_blk_n = g_low_empty_n;
    end else begin
        g_low_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        g_low_read = 1'b1;
    end else begin
        g_low_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        g_up_blk_n = g_up_empty_n;
    end else begin
        g_up_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        g_up_read = 1'b1;
    end else begin
        g_up_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_low_blk_n = r_low_empty_n;
    end else begin
        r_low_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_low_read = 1'b1;
    end else begin
        r_low_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_up_blk_n = r_up_empty_n;
    end else begin
        r_up_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_up_read = 1'b1;
    end else begin
        r_up_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_i_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_0_V_blk_n = src_data_stream_0_V_empty_n;
    end else begin
        src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_0_V_read = 1'b1;
    end else begin
        src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_i_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_1_V_blk_n = src_data_stream_1_V_empty_n;
    end else begin
        src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_1_V_read = 1'b1;
    end else begin
        src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_i_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_2_V_blk_n = src_data_stream_2_V_empty_n;
    end else begin
        src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_2_V_read = 1'b1;
    end else begin
        src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_339_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0))) & (tmp_1_i_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_fu_479_p3 = ((brmerge_i_fu_473_p2[0:0] === 1'b1) ? src_data_stream_1_V_dout : 8'd0);

assign G_fu_487_p3 = ((brmerge_i_fu_473_p2[0:0] === 1'b1) ? src_data_stream_0_V_dout : 8'd255);

assign R_fu_495_p3 = ((brmerge_i_fu_473_p2[0:0] === 1'b1) ? src_data_stream_2_V_dout : 8'd0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (b_up_empty_n == 1'b0) | (b_low_empty_n == 1'b0) | (g_up_empty_n == 1'b0) | (g_low_empty_n == 1'b0) | (r_up_empty_n == 1'b0) | (r_low_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = (((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_1_i_fu_354_p2 == 1'd1) & (src_data_stream_0_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4 = ((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0));
end

assign brmerge_i_fu_473_p2 = (tmp8_fu_449_p2 | tmp3_fu_467_p2);

assign col_cast_i_fu_350_p1 = col_i_reg_324;

assign col_fu_359_p2 = (col_i_reg_324 + 31'd1);

assign dst_data_stream_0_V_din = G_reg_564;

assign dst_data_stream_1_V_din = B_reg_559;

assign dst_data_stream_2_V_din = R_reg_569;

assign or_cond9_i_fu_431_p2 = (tmp_13_i_fu_407_p2 & tmp7_fu_425_p2);

assign rgb_flag_2_0_not_i_fu_437_p2 = (or_cond9_i_fu_431_p2 ^ 1'd1);

assign row_cast_i_fu_335_p1 = row_i_reg_313;

assign row_fu_344_p2 = (row_i_reg_313 + 31'd1);

assign tmp1_fu_455_p2 = (tmp_9_i_fu_388_p2 | tmp_5_i_fu_369_p2);

assign tmp2_fu_461_p2 = (tmp_6_i_fu_374_p2 | rgb_flag_2_0_not_i_fu_437_p2);

assign tmp3_fu_467_p2 = (tmp2_fu_461_p2 | tmp1_fu_455_p2);

assign tmp7_fu_425_p2 = (tmp_15_i_fu_419_p2 & tmp_14_i_fu_413_p2);

assign tmp8_fu_449_p2 = (tmp_12_i_fu_402_p2 | tmp9_fu_443_p2);

assign tmp9_fu_443_p2 = (tmp_8_i_fu_383_p2 | tmp_11_i_fu_397_p2);

assign tmp_10_i_fu_393_p1 = src_data_stream_1_V_dout;

assign tmp_11_i_fu_397_p2 = (($signed(tmp_10_i_fu_393_p1) < $signed(b_low_read_reg_533)) ? 1'b1 : 1'b0);

assign tmp_12_i_fu_402_p2 = (($signed(tmp_10_i_fu_393_p1) > $signed(b_up_read_reg_538)) ? 1'b1 : 1'b0);

assign tmp_13_i_fu_407_p2 = ((src_data_stream_2_V_dout > src_data_stream_0_V_dout) ? 1'b1 : 1'b0);

assign tmp_14_i_fu_413_p2 = ((src_data_stream_2_V_dout > src_data_stream_1_V_dout) ? 1'b1 : 1'b0);

assign tmp_15_i_fu_419_p2 = ((src_data_stream_0_V_dout > src_data_stream_1_V_dout) ? 1'b1 : 1'b0);

assign tmp_1_i_fu_354_p2 = (($signed(col_cast_i_fu_350_p1) < $signed(cols_read_reg_508)) ? 1'b1 : 1'b0);

assign tmp_4_i_fu_365_p1 = src_data_stream_2_V_dout;

assign tmp_5_i_fu_369_p2 = (($signed(tmp_4_i_fu_365_p1) < $signed(r_low_read_reg_513)) ? 1'b1 : 1'b0);

assign tmp_6_i_fu_374_p2 = (($signed(tmp_4_i_fu_365_p1) > $signed(r_up_read_reg_518)) ? 1'b1 : 1'b0);

assign tmp_8_i_fu_383_p2 = (($signed(tmp_i_7_fu_379_p1) < $signed(g_low_read_reg_523)) ? 1'b1 : 1'b0);

assign tmp_9_i_fu_388_p2 = (($signed(tmp_i_7_fu_379_p1) > $signed(g_up_read_reg_528)) ? 1'b1 : 1'b0);

assign tmp_i_7_fu_379_p1 = src_data_stream_0_V_dout;

assign tmp_i_fu_339_p2 = (($signed(row_cast_i_fu_335_p1) < $signed(rows_read_reg_503)) ? 1'b1 : 1'b0);

endmodule //hls_fire_dection
