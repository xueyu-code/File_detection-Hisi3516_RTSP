-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fire is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    input_r_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    input_r_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of fire is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fire,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.415000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1509,HLS_SYN_LUT=1943,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal r_low : STD_LOGIC_VECTOR (31 downto 0);
    signal r_up : STD_LOGIC_VECTOR (31 downto 0);
    signal g_low : STD_LOGIC_VECTOR (31 downto 0);
    signal g_up : STD_LOGIC_VECTOR (31 downto 0);
    signal b_low : STD_LOGIC_VECTOR (31 downto 0);
    signal b_up : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_start_out : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_start_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_rows_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_rows_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_cols_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_cols_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_img_1_rows_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_img_1_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_img_1_cols_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_img_1_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_r_low_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_r_low_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_r_up_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_r_up_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_g_low_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_g_low_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_g_up_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_g_up_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_b_low_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_b_low_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_b_up_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_b_up_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_img_0_cols_V_channel : STD_LOGIC;
    signal img_0_cols_V_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_0_cols_V_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_0_cols_V_channel : STD_LOGIC;
    signal ap_channel_done_img_0_rows_V_channel : STD_LOGIC;
    signal img_0_rows_V_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_img_0_rows_V_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_img_0_rows_V_channel : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_input_r_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal hls_fire_dection_U0_ap_start : STD_LOGIC;
    signal hls_fire_dection_U0_ap_done : STD_LOGIC;
    signal hls_fire_dection_U0_ap_continue : STD_LOGIC;
    signal hls_fire_dection_U0_ap_idle : STD_LOGIC;
    signal hls_fire_dection_U0_ap_ready : STD_LOGIC;
    signal hls_fire_dection_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal hls_fire_dection_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal hls_fire_dection_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal hls_fire_dection_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_fire_dection_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal hls_fire_dection_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_fire_dection_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal hls_fire_dection_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_fire_dection_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal hls_fire_dection_U0_rows_read : STD_LOGIC;
    signal hls_fire_dection_U0_cols_read : STD_LOGIC;
    signal hls_fire_dection_U0_r_low_read : STD_LOGIC;
    signal hls_fire_dection_U0_r_up_read : STD_LOGIC;
    signal hls_fire_dection_U0_g_low_read : STD_LOGIC;
    signal hls_fire_dection_U0_g_up_read : STD_LOGIC;
    signal hls_fire_dection_U0_b_low_read : STD_LOGIC;
    signal hls_fire_dection_U0_b_up_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_rows_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_cols_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_output_r_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Mat2AXIvideo_U0_output_r_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_output_r_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_output_r_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_output_r_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_output_r_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal rows_c_full_n : STD_LOGIC;
    signal rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_c_empty_n : STD_LOGIC;
    signal cols_c_full_n : STD_LOGIC;
    signal cols_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_c_empty_n : STD_LOGIC;
    signal img_1_rows_V_c_full_n : STD_LOGIC;
    signal img_1_rows_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_1_rows_V_c_empty_n : STD_LOGIC;
    signal img_1_cols_V_c_full_n : STD_LOGIC;
    signal img_1_cols_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_1_cols_V_c_empty_n : STD_LOGIC;
    signal r_low_c_full_n : STD_LOGIC;
    signal r_low_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal r_low_c_empty_n : STD_LOGIC;
    signal r_up_c_full_n : STD_LOGIC;
    signal r_up_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal r_up_c_empty_n : STD_LOGIC;
    signal g_low_c_full_n : STD_LOGIC;
    signal g_low_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal g_low_c_empty_n : STD_LOGIC;
    signal g_up_c_full_n : STD_LOGIC;
    signal g_up_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal g_up_c_empty_n : STD_LOGIC;
    signal b_low_c_full_n : STD_LOGIC;
    signal b_low_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal b_low_c_empty_n : STD_LOGIC;
    signal b_up_c_full_n : STD_LOGIC;
    signal b_up_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal b_up_c_empty_n : STD_LOGIC;
    signal img_0_rows_V_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_rows_V_channel_empty_n : STD_LOGIC;
    signal img_0_cols_V_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_0_cols_V_channel_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_full_n : STD_LOGIC;
    signal img_0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_full_n : STD_LOGIC;
    signal img_0_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_full_n : STD_LOGIC;
    signal img_0_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_full_n : STD_LOGIC;
    signal img_1_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_full_n : STD_LOGIC;
    signal img_1_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_empty_n : STD_LOGIC;
    signal img_1_data_stream_2_full_n : STD_LOGIC;
    signal img_1_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_2_empty_n : STD_LOGIC;
    signal start_for_hls_fire_dection_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_fire_dection_U0_full_n : STD_LOGIC;
    signal start_for_hls_fire_dection_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_fire_dection_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_full_n : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal hls_fire_dection_U0_start_full_n : STD_LOGIC;
    signal hls_fire_dection_U0_start_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_Mat_exit45_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        r_low : IN STD_LOGIC_VECTOR (31 downto 0);
        r_up : IN STD_LOGIC_VECTOR (31 downto 0);
        g_low : IN STD_LOGIC_VECTOR (31 downto 0);
        g_up : IN STD_LOGIC_VECTOR (31 downto 0);
        b_low : IN STD_LOGIC_VECTOR (31 downto 0);
        b_up : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_out_full_n : IN STD_LOGIC;
        rows_out_write : OUT STD_LOGIC;
        cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_out_full_n : IN STD_LOGIC;
        cols_out_write : OUT STD_LOGIC;
        img_1_rows_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_1_rows_V_out_full_n : IN STD_LOGIC;
        img_1_rows_V_out_write : OUT STD_LOGIC;
        img_1_cols_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_1_cols_V_out_full_n : IN STD_LOGIC;
        img_1_cols_V_out_write : OUT STD_LOGIC;
        r_low_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_low_out_full_n : IN STD_LOGIC;
        r_low_out_write : OUT STD_LOGIC;
        r_up_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_up_out_full_n : IN STD_LOGIC;
        r_up_out_write : OUT STD_LOGIC;
        g_low_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        g_low_out_full_n : IN STD_LOGIC;
        g_low_out_write : OUT STD_LOGIC;
        g_up_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        g_up_out_full_n : IN STD_LOGIC;
        g_up_out_write : OUT STD_LOGIC;
        b_low_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        b_low_out_full_n : IN STD_LOGIC;
        b_low_out_write : OUT STD_LOGIC;
        b_up_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        b_up_out_full_n : IN STD_LOGIC;
        b_up_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        input_r_TVALID : IN STD_LOGIC;
        input_r_TREADY : OUT STD_LOGIC;
        input_r_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        input_r_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        input_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component hls_fire_dection IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        r_low_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        r_low_empty_n : IN STD_LOGIC;
        r_low_read : OUT STD_LOGIC;
        r_up_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        r_up_empty_n : IN STD_LOGIC;
        r_up_read : OUT STD_LOGIC;
        g_low_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        g_low_empty_n : IN STD_LOGIC;
        g_low_read : OUT STD_LOGIC;
        g_up_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        g_up_empty_n : IN STD_LOGIC;
        g_up_read : OUT STD_LOGIC;
        b_low_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        b_low_empty_n : IN STD_LOGIC;
        b_low_read : OUT STD_LOGIC;
        b_up_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        b_up_empty_n : IN STD_LOGIC;
        b_up_read : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        output_r_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        output_r_TVALID : OUT STD_LOGIC;
        output_r_TREADY : IN STD_LOGIC;
        output_r_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_hls_firbkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIcud IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fire_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_low : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_up : OUT STD_LOGIC_VECTOR (31 downto 0);
        g_low : OUT STD_LOGIC_VECTOR (31 downto 0);
        g_up : OUT STD_LOGIC_VECTOR (31 downto 0);
        b_low : OUT STD_LOGIC_VECTOR (31 downto 0);
        b_up : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fire_AXILiteS_s_axi_U : component fire_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rows => rows,
        cols => cols,
        r_low => r_low,
        r_up => r_up,
        g_low => g_low,
        g_up => g_up,
        b_low => b_low,
        b_up => b_up);

    Block_Mat_exit45_pro_U0 : component Block_Mat_exit45_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit45_pro_U0_ap_start,
        start_full_n => Block_Mat_exit45_pro_U0_start_full_n,
        ap_done => Block_Mat_exit45_pro_U0_ap_done,
        ap_continue => Block_Mat_exit45_pro_U0_ap_continue,
        ap_idle => Block_Mat_exit45_pro_U0_ap_idle,
        ap_ready => Block_Mat_exit45_pro_U0_ap_ready,
        start_out => Block_Mat_exit45_pro_U0_start_out,
        start_write => Block_Mat_exit45_pro_U0_start_write,
        rows => rows,
        cols => cols,
        r_low => r_low,
        r_up => r_up,
        g_low => g_low,
        g_up => g_up,
        b_low => b_low,
        b_up => b_up,
        rows_out_din => Block_Mat_exit45_pro_U0_rows_out_din,
        rows_out_full_n => rows_c_full_n,
        rows_out_write => Block_Mat_exit45_pro_U0_rows_out_write,
        cols_out_din => Block_Mat_exit45_pro_U0_cols_out_din,
        cols_out_full_n => cols_c_full_n,
        cols_out_write => Block_Mat_exit45_pro_U0_cols_out_write,
        img_1_rows_V_out_din => Block_Mat_exit45_pro_U0_img_1_rows_V_out_din,
        img_1_rows_V_out_full_n => img_1_rows_V_c_full_n,
        img_1_rows_V_out_write => Block_Mat_exit45_pro_U0_img_1_rows_V_out_write,
        img_1_cols_V_out_din => Block_Mat_exit45_pro_U0_img_1_cols_V_out_din,
        img_1_cols_V_out_full_n => img_1_cols_V_c_full_n,
        img_1_cols_V_out_write => Block_Mat_exit45_pro_U0_img_1_cols_V_out_write,
        r_low_out_din => Block_Mat_exit45_pro_U0_r_low_out_din,
        r_low_out_full_n => r_low_c_full_n,
        r_low_out_write => Block_Mat_exit45_pro_U0_r_low_out_write,
        r_up_out_din => Block_Mat_exit45_pro_U0_r_up_out_din,
        r_up_out_full_n => r_up_c_full_n,
        r_up_out_write => Block_Mat_exit45_pro_U0_r_up_out_write,
        g_low_out_din => Block_Mat_exit45_pro_U0_g_low_out_din,
        g_low_out_full_n => g_low_c_full_n,
        g_low_out_write => Block_Mat_exit45_pro_U0_g_low_out_write,
        g_up_out_din => Block_Mat_exit45_pro_U0_g_up_out_din,
        g_up_out_full_n => g_up_c_full_n,
        g_up_out_write => Block_Mat_exit45_pro_U0_g_up_out_write,
        b_low_out_din => Block_Mat_exit45_pro_U0_b_low_out_din,
        b_low_out_full_n => b_low_c_full_n,
        b_low_out_write => Block_Mat_exit45_pro_U0_b_low_out_write,
        b_up_out_din => Block_Mat_exit45_pro_U0_b_up_out_din,
        b_up_out_full_n => b_up_c_full_n,
        b_up_out_write => Block_Mat_exit45_pro_U0_b_up_out_write,
        ap_return_0 => Block_Mat_exit45_pro_U0_ap_return_0,
        ap_return_1 => Block_Mat_exit45_pro_U0_ap_return_1);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        input_r_TDATA => input_r_TDATA,
        input_r_TVALID => input_r_TVALID,
        input_r_TREADY => AXIvideo2Mat_U0_input_r_TREADY,
        input_r_TKEEP => input_r_TKEEP,
        input_r_TSTRB => input_r_TSTRB,
        input_r_TUSER => input_r_TUSER,
        input_r_TLAST => input_r_TLAST,
        input_r_TID => input_r_TID,
        input_r_TDEST => input_r_TDEST,
        img_rows_V_read => img_0_rows_V_channel_dout,
        img_cols_V_read => img_0_cols_V_channel_dout,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_0_data_stream_0_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_0_data_stream_1_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_0_data_stream_2_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write);

    hls_fire_dection_U0 : component hls_fire_dection
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hls_fire_dection_U0_ap_start,
        ap_done => hls_fire_dection_U0_ap_done,
        ap_continue => hls_fire_dection_U0_ap_continue,
        ap_idle => hls_fire_dection_U0_ap_idle,
        ap_ready => hls_fire_dection_U0_ap_ready,
        src_data_stream_0_V_dout => img_0_data_stream_0_dout,
        src_data_stream_0_V_empty_n => img_0_data_stream_0_empty_n,
        src_data_stream_0_V_read => hls_fire_dection_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => img_0_data_stream_1_dout,
        src_data_stream_1_V_empty_n => img_0_data_stream_1_empty_n,
        src_data_stream_1_V_read => hls_fire_dection_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => img_0_data_stream_2_dout,
        src_data_stream_2_V_empty_n => img_0_data_stream_2_empty_n,
        src_data_stream_2_V_read => hls_fire_dection_U0_src_data_stream_2_V_read,
        dst_data_stream_0_V_din => hls_fire_dection_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => img_1_data_stream_0_full_n,
        dst_data_stream_0_V_write => hls_fire_dection_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => hls_fire_dection_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => img_1_data_stream_1_full_n,
        dst_data_stream_1_V_write => hls_fire_dection_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => hls_fire_dection_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => img_1_data_stream_2_full_n,
        dst_data_stream_2_V_write => hls_fire_dection_U0_dst_data_stream_2_V_write,
        rows_dout => rows_c_dout,
        rows_empty_n => rows_c_empty_n,
        rows_read => hls_fire_dection_U0_rows_read,
        cols_dout => cols_c_dout,
        cols_empty_n => cols_c_empty_n,
        cols_read => hls_fire_dection_U0_cols_read,
        r_low_dout => r_low_c_dout,
        r_low_empty_n => r_low_c_empty_n,
        r_low_read => hls_fire_dection_U0_r_low_read,
        r_up_dout => r_up_c_dout,
        r_up_empty_n => r_up_c_empty_n,
        r_up_read => hls_fire_dection_U0_r_up_read,
        g_low_dout => g_low_c_dout,
        g_low_empty_n => g_low_c_empty_n,
        g_low_read => hls_fire_dection_U0_g_low_read,
        g_up_dout => g_up_c_dout,
        g_up_empty_n => g_up_c_empty_n,
        g_up_read => hls_fire_dection_U0_g_up_read,
        b_low_dout => b_low_c_dout,
        b_low_empty_n => b_low_c_empty_n,
        b_low_read => hls_fire_dection_U0_b_low_read,
        b_up_dout => b_up_c_dout,
        b_up_empty_n => b_up_c_empty_n,
        b_up_read => hls_fire_dection_U0_b_up_read);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_rows_V_dout => img_1_rows_V_c_dout,
        img_rows_V_empty_n => img_1_rows_V_c_empty_n,
        img_rows_V_read => Mat2AXIvideo_U0_img_rows_V_read,
        img_cols_V_dout => img_1_cols_V_c_dout,
        img_cols_V_empty_n => img_1_cols_V_c_empty_n,
        img_cols_V_read => Mat2AXIvideo_U0_img_cols_V_read,
        img_data_stream_0_V_dout => img_1_data_stream_0_dout,
        img_data_stream_0_V_empty_n => img_1_data_stream_0_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_1_data_stream_1_dout,
        img_data_stream_1_V_empty_n => img_1_data_stream_1_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_1_data_stream_2_dout,
        img_data_stream_2_V_empty_n => img_1_data_stream_2_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        output_r_TDATA => Mat2AXIvideo_U0_output_r_TDATA,
        output_r_TVALID => Mat2AXIvideo_U0_output_r_TVALID,
        output_r_TREADY => output_r_TREADY,
        output_r_TKEEP => Mat2AXIvideo_U0_output_r_TKEEP,
        output_r_TSTRB => Mat2AXIvideo_U0_output_r_TSTRB,
        output_r_TUSER => Mat2AXIvideo_U0_output_r_TUSER,
        output_r_TLAST => Mat2AXIvideo_U0_output_r_TLAST,
        output_r_TID => Mat2AXIvideo_U0_output_r_TID,
        output_r_TDEST => Mat2AXIvideo_U0_output_r_TDEST);

    rows_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_rows_out_din,
        if_full_n => rows_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_rows_out_write,
        if_dout => rows_c_dout,
        if_empty_n => rows_c_empty_n,
        if_read => hls_fire_dection_U0_rows_read);

    cols_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_cols_out_din,
        if_full_n => cols_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_cols_out_write,
        if_dout => cols_c_dout,
        if_empty_n => cols_c_empty_n,
        if_read => hls_fire_dection_U0_cols_read);

    img_1_rows_V_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_img_1_rows_V_out_din,
        if_full_n => img_1_rows_V_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_img_1_rows_V_out_write,
        if_dout => img_1_rows_V_c_dout,
        if_empty_n => img_1_rows_V_c_empty_n,
        if_read => Mat2AXIvideo_U0_img_rows_V_read);

    img_1_cols_V_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_img_1_cols_V_out_din,
        if_full_n => img_1_cols_V_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_img_1_cols_V_out_write,
        if_dout => img_1_cols_V_c_dout,
        if_empty_n => img_1_cols_V_c_empty_n,
        if_read => Mat2AXIvideo_U0_img_cols_V_read);

    r_low_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_r_low_out_din,
        if_full_n => r_low_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_r_low_out_write,
        if_dout => r_low_c_dout,
        if_empty_n => r_low_c_empty_n,
        if_read => hls_fire_dection_U0_r_low_read);

    r_up_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_r_up_out_din,
        if_full_n => r_up_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_r_up_out_write,
        if_dout => r_up_c_dout,
        if_empty_n => r_up_c_empty_n,
        if_read => hls_fire_dection_U0_r_up_read);

    g_low_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_g_low_out_din,
        if_full_n => g_low_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_g_low_out_write,
        if_dout => g_low_c_dout,
        if_empty_n => g_low_c_empty_n,
        if_read => hls_fire_dection_U0_g_low_read);

    g_up_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_g_up_out_din,
        if_full_n => g_up_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_g_up_out_write,
        if_dout => g_up_c_dout,
        if_empty_n => g_up_c_empty_n,
        if_read => hls_fire_dection_U0_g_up_read);

    b_low_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_b_low_out_din,
        if_full_n => b_low_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_b_low_out_write,
        if_dout => b_low_c_dout,
        if_empty_n => b_low_c_empty_n,
        if_read => hls_fire_dection_U0_b_low_read);

    b_up_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_b_up_out_din,
        if_full_n => b_up_c_full_n,
        if_write => Block_Mat_exit45_pro_U0_b_up_out_write,
        if_dout => b_up_c_dout,
        if_empty_n => b_up_c_empty_n,
        if_read => hls_fire_dection_U0_b_up_read);

    img_0_rows_V_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_ap_return_0,
        if_full_n => img_0_rows_V_channel_full_n,
        if_write => ap_channel_done_img_0_rows_V_channel,
        if_dout => img_0_rows_V_channel_dout,
        if_empty_n => img_0_rows_V_channel_empty_n,
        if_read => AXIvideo2Mat_U0_ap_ready);

    img_0_cols_V_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_ap_return_1,
        if_full_n => img_0_cols_V_channel_full_n,
        if_write => ap_channel_done_img_0_cols_V_channel,
        if_dout => img_0_cols_V_channel_dout,
        if_empty_n => img_0_cols_V_channel_empty_n,
        if_read => AXIvideo2Mat_U0_ap_ready);

    img_0_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_dout,
        if_empty_n => img_0_data_stream_0_empty_n,
        if_read => hls_fire_dection_U0_src_data_stream_0_V_read);

    img_0_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_dout,
        if_empty_n => img_0_data_stream_1_empty_n,
        if_read => hls_fire_dection_U0_src_data_stream_1_V_read);

    img_0_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_dout,
        if_empty_n => img_0_data_stream_2_empty_n,
        if_read => hls_fire_dection_U0_src_data_stream_2_V_read);

    img_1_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_fire_dection_U0_dst_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_full_n,
        if_write => hls_fire_dection_U0_dst_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_dout,
        if_empty_n => img_1_data_stream_0_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    img_1_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_fire_dection_U0_dst_data_stream_1_V_din,
        if_full_n => img_1_data_stream_1_full_n,
        if_write => hls_fire_dection_U0_dst_data_stream_1_V_write,
        if_dout => img_1_data_stream_1_dout,
        if_empty_n => img_1_data_stream_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    img_1_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_fire_dection_U0_dst_data_stream_2_V_din,
        if_full_n => img_1_data_stream_2_full_n,
        if_write => hls_fire_dection_U0_dst_data_stream_2_V_write,
        if_dout => img_1_data_stream_2_dout,
        if_empty_n => img_1_data_stream_2_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_hls_firbkb_U : component start_for_hls_firbkb
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_hls_fire_dection_U0_din,
        if_full_n => start_for_hls_fire_dection_U0_full_n,
        if_write => Block_Mat_exit45_pro_U0_start_write,
        if_dout => start_for_hls_fire_dection_U0_dout,
        if_empty_n => start_for_hls_fire_dection_U0_empty_n,
        if_read => hls_fire_dection_U0_ap_ready);

    start_for_Mat2AXIcud_U : component start_for_Mat2AXIcud
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => Block_Mat_exit45_pro_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);





    ap_sync_reg_channel_write_img_0_cols_V_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_0_cols_V_channel <= ap_const_logic_0;
            else
                if (((Block_Mat_exit45_pro_U0_ap_done and Block_Mat_exit45_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_0_cols_V_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_0_cols_V_channel <= ap_sync_channel_write_img_0_cols_V_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_img_0_rows_V_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_img_0_rows_V_channel <= ap_const_logic_0;
            else
                if (((Block_Mat_exit45_pro_U0_ap_done and Block_Mat_exit45_pro_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_img_0_rows_V_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_img_0_rows_V_channel <= ap_sync_channel_write_img_0_rows_V_channel;
                end if; 
            end if;
        end if;
    end process;

    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= (img_0_rows_V_channel_empty_n and img_0_cols_V_channel_empty_n);
    AXIvideo2Mat_U0_start_full_n <= ap_const_logic_1;
    AXIvideo2Mat_U0_start_write <= ap_const_logic_0;
    Block_Mat_exit45_pro_U0_ap_continue <= (ap_sync_channel_write_img_0_rows_V_channel and ap_sync_channel_write_img_0_cols_V_channel);
    Block_Mat_exit45_pro_U0_ap_start <= ap_const_logic_1;
    Block_Mat_exit45_pro_U0_start_full_n <= (start_for_hls_fire_dection_U0_full_n and start_for_Mat2AXIvideo_U0_full_n);
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    ap_channel_done_img_0_cols_V_channel <= ((ap_sync_reg_channel_write_img_0_cols_V_channel xor ap_const_logic_1) and Block_Mat_exit45_pro_U0_ap_done);
    ap_channel_done_img_0_rows_V_channel <= ((ap_sync_reg_channel_write_img_0_rows_V_channel xor ap_const_logic_1) and Block_Mat_exit45_pro_U0_ap_done);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_img_0_cols_V_channel <= ((img_0_cols_V_channel_full_n and ap_channel_done_img_0_cols_V_channel) or ap_sync_reg_channel_write_img_0_cols_V_channel);
    ap_sync_channel_write_img_0_rows_V_channel <= ((img_0_rows_V_channel_full_n and ap_channel_done_img_0_rows_V_channel) or ap_sync_reg_channel_write_img_0_rows_V_channel);
    ap_sync_continue <= ap_const_logic_0;
    hls_fire_dection_U0_ap_continue <= ap_const_logic_1;
    hls_fire_dection_U0_ap_start <= start_for_hls_fire_dection_U0_empty_n;
    hls_fire_dection_U0_start_full_n <= ap_const_logic_1;
    hls_fire_dection_U0_start_write <= ap_const_logic_0;
    input_r_TREADY <= AXIvideo2Mat_U0_input_r_TREADY;
    output_r_TDATA <= Mat2AXIvideo_U0_output_r_TDATA;
    output_r_TDEST <= Mat2AXIvideo_U0_output_r_TDEST;
    output_r_TID <= Mat2AXIvideo_U0_output_r_TID;
    output_r_TKEEP <= Mat2AXIvideo_U0_output_r_TKEEP;
    output_r_TLAST <= Mat2AXIvideo_U0_output_r_TLAST;
    output_r_TSTRB <= Mat2AXIvideo_U0_output_r_TSTRB;
    output_r_TUSER <= Mat2AXIvideo_U0_output_r_TUSER;
    output_r_TVALID <= Mat2AXIvideo_U0_output_r_TVALID;
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_hls_fire_dection_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
